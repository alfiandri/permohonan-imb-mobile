{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearMemo = clearMemo;\nexports.getSupportedPlatformInfoAsync = getSupportedPlatformInfoAsync;\nexports.getSupportedPlatformInfoFunctions = getSupportedPlatformInfoFunctions;\nexports.getSupportedPlatformInfoSync = getSupportedPlatformInfoSync;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _reactNative = require(\"react-native\");\nvar _excluded = [\"syncGetter\"];\nvar memo = {};\nfunction clearMemo() {\n  memo = {};\n}\nfunction getSupportedFunction(supportedPlatforms, getter, defaultGetter) {\n  var supportedMap = {};\n  supportedPlatforms.filter(function (key) {\n    return _reactNative.Platform.OS == key;\n  }).forEach(function (key) {\n    return supportedMap[key] = getter;\n  });\n  return _reactNative.Platform.select(Object.assign({}, supportedMap, {\n    default: defaultGetter\n  }));\n}\nfunction getSupportedPlatformInfoSync(_ref) {\n  var getter = _ref.getter,\n    supportedPlatforms = _ref.supportedPlatforms,\n    defaultValue = _ref.defaultValue,\n    memoKey = _ref.memoKey;\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    var output = getSupportedFunction(supportedPlatforms, getter, function () {\n      return defaultValue;\n    })();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n    return output;\n  }\n}\nfunction getSupportedPlatformInfoAsync(_x) {\n  return _getSupportedPlatformInfoAsync.apply(this, arguments);\n}\nfunction _getSupportedPlatformInfoAsync() {\n  _getSupportedPlatformInfoAsync = (0, _asyncToGenerator2.default)(function* (_ref2) {\n    var getter = _ref2.getter,\n      supportedPlatforms = _ref2.supportedPlatforms,\n      defaultValue = _ref2.defaultValue,\n      memoKey = _ref2.memoKey;\n    if (memoKey && memo[memoKey] != undefined) {\n      return memo[memoKey];\n    } else {\n      var output = yield getSupportedFunction(supportedPlatforms, getter, function () {\n        return Promise.resolve(defaultValue);\n      })();\n      if (memoKey) {\n        memo[memoKey] = output;\n      }\n      return output;\n    }\n  });\n  return _getSupportedPlatformInfoAsync.apply(this, arguments);\n}\nfunction getSupportedPlatformInfoFunctions(_ref3) {\n  var syncGetter = _ref3.syncGetter,\n    asyncParams = (0, _objectWithoutProperties2.default)(_ref3, _excluded);\n  return [function () {\n    return getSupportedPlatformInfoAsync(asyncParams);\n  }, function () {\n    return getSupportedPlatformInfoSync(Object.assign({}, asyncParams, {\n      getter: syncGetter\n    }));\n  }];\n}","map":{"version":3,"names":["_reactNative","require","_excluded","memo","clearMemo","getSupportedFunction","supportedPlatforms","getter","defaultGetter","supportedMap","filter","key","Platform","OS","forEach","select","Object","assign","default","getSupportedPlatformInfoSync","_ref","defaultValue","memoKey","undefined","output","getSupportedPlatformInfoAsync","_x","_getSupportedPlatformInfoAsync","apply","arguments","_asyncToGenerator2","_ref2","Promise","resolve","getSupportedPlatformInfoFunctions","_ref3","syncGetter","asyncParams","_objectWithoutProperties2"],"sources":["/Users/topremitdevice/Documents/alfi/portofolio/Permohonan-IMB-Mobile/node_modules/react-native-device-info/lib/module/internal/supported-platform-info.ts"],"sourcesContent":["import { Platform } from 'react-native';\n\nimport {\n  PlatformArray,\n  Getter,\n  GetSupportedPlatformInfoAsyncParams,\n  GetSupportedPlatformInfoSyncParams,\n  GetSupportedPlatformInfoFunctionsParams,\n} from './privateTypes';\n\ntype MemoType = { [key: string]: any };\n// centralized memo object\nlet memo: MemoType = {};\n\nexport function clearMemo() {\n  memo = {};\n}\n\n/**\n * function returns the proper getter based current platform X supported platforms\n * @param supportedPlatforms array of supported platforms (OS)\n * @param getter desired function used to get info\n * @param defaultGetter getter that returns a default value if desired getter is not supported by current platform\n */\nfunction getSupportedFunction<T>(\n  supportedPlatforms: PlatformArray,\n  getter: Getter<T>,\n  defaultGetter: Getter<T>\n): Getter<T> {\n  let supportedMap: any = {};\n  supportedPlatforms\n    .filter((key) => Platform.OS == key)\n    .forEach((key) => (supportedMap[key] = getter));\n  return Platform.select({\n    ...supportedMap,\n    default: defaultGetter,\n  });\n}\n\n/**\n * function used to get desired info synchronously — with optional memoization\n * @param param0\n */\nexport function getSupportedPlatformInfoSync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoSyncParams<T>): T {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = getSupportedFunction(supportedPlatforms, getter, () => defaultValue)();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n    return output;\n  }\n}\n\n/**\n * function used to get desired info asynchronously — with optional memoization\n * @param param0\n */\nexport async function getSupportedPlatformInfoAsync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoAsyncParams<T>): Promise<T> {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = await getSupportedFunction(supportedPlatforms, getter, () =>\n      Promise.resolve(defaultValue)\n    )();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\n\n/**\n * function that returns array of getter functions [async, sync]\n * @param param0\n */\nexport function getSupportedPlatformInfoFunctions<T>({\n  syncGetter,\n  ...asyncParams\n}: GetSupportedPlatformInfoFunctionsParams<T>): [Getter<Promise<T>>, Getter<T>] {\n  return [\n    () => getSupportedPlatformInfoAsync(asyncParams),\n    () => getSupportedPlatformInfoSync({ ...asyncParams, getter: syncGetter }),\n  ];\n}\n"],"mappings":";;;;;;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAAA,IAAAC,SAAA;AAYA,IAAIC,IAAc,GAAG,EAArB;AAEO,SAASC,SAATA,CAAA,EAAqB;EAC1BD,IAAI,GAAG,EAAP;AACD;AAQD,SAASE,oBAATA,CACEC,kBADF,EAEEC,MAFF,EAGEC,aAHF,EAIa;EACX,IAAIC,YAAiB,GAAG,EAAxB;EACAH,kBAAkB,CACfI,MADH,CACW,UAAAC,GAAD;IAAA,OAASC,qBAAQ,CAACC,EAAT,IAAeF,GADlC;EAAA,GAEGG,OAFH,CAEY,UAAAH,GAAD;IAAA,OAAUF,YAAY,CAACE,GAAD,CAAZ,GAAoBJ,MAFzC;EAAA;EAGA,OAAOK,qBAAQ,CAACG,MAAT,CAAAC,MAAA,CAAAC,MAAA,KACFR,YADkB;IAErBS,OAAO,EAAEV;EAAA,EAFJ,CAAP;AAID;AAMM,SAASW,4BAATA,CAAAC,IAAA,EAKsC;EAAA,IAJ3Cb,MAD8C,GAAAa,IAAA,CAC9Cb,MAD8C;IAE9CD,kBAF8C,GAAAc,IAAA,CAE9Cd,kBAF8C;IAG9Ce,YAH8C,GAAAD,IAAA,CAG9CC,YAH8C;IAI9CC,OAAA,GAAAF,IAAA,CAAAE,OAAA;EAEA,IAAIA,OAAO,IAAInB,IAAI,CAACmB,OAAD,CAAJ,IAAiBC,SAAhC,EAA2C;IACzC,OAAOpB,IAAI,CAACmB,OAAD,CAAX;EACD,CAFD,MAEO;IACL,IAAME,MAAM,GAAGnB,oBAAoB,CAACC,kBAAD,EAAqBC,MAArB,EAA6B;MAAA,OAAMc,YAAnC;IAAA,EAApB,EAAf;IACA,IAAIC,OAAJ,EAAa;MACXnB,IAAI,CAACmB,OAAD,CAAJ,GAAgBE,MAAhB;IACD;IACD,OAAOA,MAAP;EACD;AACF;AAAA,SAMqBC,6BAAfA,CAAAC,EAAA;EAAA,OAAAC,8BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,+BAAA;EAAAA,8BAAA,OAAAG,kBAAA,CAAAZ,OAAA,aAAAa,KAAA,EAKgD;IAAA,IAJrDxB,MADqD,GAAAwB,KAAA,CACrDxB,MADqD;MAErDD,kBAFqD,GAAAyB,KAAA,CAErDzB,kBAFqD;MAGrDe,YAHqD,GAAAU,KAAA,CAGrDV,YAHqD;MAIrDC,OAAA,GAAAS,KAAA,CAAAT,OAAA;IAEA,IAAIA,OAAO,IAAInB,IAAI,CAACmB,OAAD,CAAJ,IAAiBC,SAAhC,EAA2C;MACzC,OAAOpB,IAAI,CAACmB,OAAD,CAAX;IACD,CAFD,MAEO;MACL,IAAME,MAAM,SAASnB,oBAAoB,CAACC,kBAAD,EAAqBC,MAArB,EAA6B;QAAA,OACpEyB,OAAO,CAACC,OAAR,CAAgBZ,YAAhB,CADuC;MAAA,EAApB,EAArB;MAGA,IAAIC,OAAJ,EAAa;QACXnB,IAAI,CAACmB,OAAD,CAAJ,GAAgBE,MAAhB;MACD;MAED,OAAOA,MAAP;IACD;EACF;EAAA,OAAAG,8BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAMM,SAASK,iCAATA,CAAAC,KAAA,EAGyE;EAAA,IAF9EC,UADmD,GAAAD,KAAA,CACnDC,UADmD;IAEhDC,WAAA,OAAAC,yBAAA,CAAApB,OAAA,EAAAiB,KAAA,EAAAjC,SAAA;EAEH,OAAO,CACL;IAAA,OAAMuB,6BAA6B,CAACY,WAAD,CAD9B;EAAA,GAEL;IAAA,OAAMlB,4BAA4B,CAAAH,MAAA,CAAAC,MAAA,KAAMoB,WAAL;MAAkB9B,MAAM,EAAE6B;IAAA,EAA3B,CAF7B;EAAA,EAAP;AAID"},"metadata":{},"sourceType":"script","externalDependencies":[]}